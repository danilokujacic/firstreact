{"version":3,"sources":["serviceWorker.js","containers/card.js","containers/listarobota.js","containers/searchbox.js","containers/scroll.js","components/ErrorBoundry.js","components/app.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","id","src","name","listarobota","robots","map","robot","ri","key","SearchBox","type","placeholder","onChange","searchchange","Scroll","style","overflowY","height","border","children","ErrorBoundry","state","hasError","ErrorMsg","error","info","this","setState","Component","App","onSearchChange","event","searchbar","target","value","roboti","fetch","then","response","json","users","filterrobot","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCLSC,G,MAVF,SAAAC,GACX,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKF,EAAMG,GAAIC,IAAG,+BAA0BJ,EAAMK,KAAhC,cACvB,6BACE,4BAAKL,EAAMK,UCIJC,EATK,SAAAN,GAClB,OACE,yBAAKC,UAAU,QACZD,EAAMO,OAAOC,KAAI,SAACC,EAAOC,GACxB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAIP,GAAIM,EAAMN,GAAIE,KAAMI,EAAMJ,YCAzCO,EALG,SAAAZ,GAChB,OACE,2BAAOa,KAAK,SAASC,YAAY,SAASC,SAAUf,EAAMgB,gBCW/CC,EAbA,SAAAjB,GACb,OACE,yBACEkB,MAAO,CACLC,UAAW,SACXC,OAAQ,QACRC,OAAQ,oBAGTrB,EAAMsB,WCcEC,E,YAtBb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACDwB,MAAQ,CACXC,UAAU,EACVC,SAAU,IAJK,E,+EAQDC,EAAOC,GACvBC,KAAKC,SAAS,CACZL,UAAU,EACVC,SAAUE,M,+BAIZ,OAAIC,KAAKL,MAAMC,SACN,sCAAYI,KAAKL,MAAMI,MAEvBC,KAAK7B,MAAMsB,a,GAnBGS,aCgDZC,E,YA3Cb,aAAe,IAAD,8BACZ,+CAeFC,eAAiB,SAAAC,GACf,EAAKJ,SAAS,CAAEK,UAAWD,EAAME,OAAOC,SAfxC,EAAKb,MAAQ,CACXc,OAAQ,GACRH,UAAW,IAJD,E,iFAOO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAG,GACJ,EAAKb,SAAS,CAAEQ,OAAQK,S,+BAOpB,IAAD,EACuBd,KAAKL,MAA3Bc,EADD,EACCA,OAAQH,EADT,EACSA,UACVS,EAAcf,KAAKL,MAAMc,OAAOO,QAAO,SAAApC,GAC3C,OAAOA,EAAMJ,KAAKyC,cAAcC,SAASZ,MAE3C,OAAQG,EAAOU,OAGb,6BACE,kDACA,kBAAC,EAAD,CACEb,UAAWN,KAAKL,MAAMW,UACtBnB,aAAca,KAAKI,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAa1B,OAAQqC,OAV3B,2C,GA3BYb,a,MCAlBkB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.477b2dd2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport \"./cards.css\";\r\n\r\nconst Card = props => {\r\n  return (\r\n    <div className=\"card\">\r\n      <img alt={props.id} src={`https://robohash.org/${props.name}?200x200`}></img>\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nconst listarobota = props => {\r\n  return (\r\n    <div className=\"flex\">\r\n      {props.robots.map((robot, ri) => {\r\n        return <Card key={ri} id={robot.id} name={robot.name} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\nexport default listarobota;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = props => {\r\n  return (\r\n    <input type=\"search\" placeholder=\"Search\" onChange={props.searchchange} />\r\n  );\r\n};\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        height: \"500px\",\r\n        border: \"2px solid white\"\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n      ErrorMsg: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true,\r\n      ErrorMsg: info\r\n    });\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Error: {this.state.info}</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\nexport default ErrorBoundry;\r\n","import React, { Component } from \"react\";\r\nimport Listarobota from \"../containers/listarobota\";\r\nimport SearchBox from \"../containers/searchbox\";\r\nimport Scroll from \"../containers/scroll\";\r\nimport ErrorBoundry from \"./ErrorBoundry\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      roboti: [],\r\n      searchbar: \"\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({ roboti: users });\r\n      });\r\n  }\r\n  onSearchChange = event => {\r\n    this.setState({ searchbar: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const { roboti, searchbar } = this.state;\r\n    const filterrobot = this.state.roboti.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchbar);\r\n    });\r\n    return !roboti.length ? (\r\n      <h1>Loading</h1>\r\n    ) : (\r\n      <div>\r\n        <h1>Lista nasih robota</h1>\r\n        <SearchBox\r\n          searchbar={this.state.searchbar}\r\n          searchchange={this.onSearchChange}\r\n        />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <Listarobota robots={filterrobot} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./components/app.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}